services:
  web:
    build:
      context: .
      dockerfile: DockerFile
    restart: always
    container_name: web-page
    # image: th33raphat/web-final_act-gate:latest
    environment:
      - DATABASE_HOST=database
      - DATABASE_USER=${MYSQL_USER}
      - DATABASE_PASSWORD=${MYSQL_PASSWORD}
      - DATABASE_NAME=${MYSQL_DATABASE}
    env_file:
      - ./.env
    ports:
      - "3000:80"
    volumes:
      - .:/var/www/html/
    depends_on:
      - database
    networks:
      - mynetwork

  database:
    image: mysql:latest
    container_name: database
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - ${MYSQL_PORT}:3306
    env_file:
      - ./.env
    volumes:
      - sqldb:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d
    networks:
      - mynetwork

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: final_project-phpmyadmin
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      PMA_HOST: database
      PMA_PORT: 3306
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
    env_file:
      - ./.env
    depends_on:
      - database
    ports:
      - "8080:80"
    networks:
      - mynetwork
  
  # backup:
  #   image: debian:bullseye-slim
  #   container_name: backup
  #   volumes:
  #     - ./sql/backup.sh:/backup.sh
  #     - ./sql/backups:/backups
  #     - ./backups:/host_backups
  #   environment:
  #     - MYSQL_USER=${MYSQL_USER}
  #     - MYSQL_PASSWORD=${MYSQL_PASSWORD}
  #     - MYSQL_DATABASE=${MYSQL_DATABASE}
  #     - MYSQL_HOST=database
  #   depends_on:
  #     - database
  #   command: >
  #     /bin/bash -c '
  #     apt-get update && 
  #     apt-get install -y cron mariadb-client &&
  #     chmod +x /backup.sh &&
  #     echo "0 0 * * * root /backup.sh >> /var/log/cron.log 2>&1" > /etc/cron.d/backup-cron &&
  #     chmod 0644 /etc/cron.d/backup-cron &&
  #     touch /var/log/cron.log &&
  #     cron && tail -f /var/log/cron.log
  #     '
  #   networks:
  #     - mynetwork
  #   restart: unless-stopped

networks:
  mynetwork:
    driver: bridge

volumes:
  sqldb:
  backups: